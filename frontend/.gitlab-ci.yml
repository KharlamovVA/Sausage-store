cache:
  paths:
    - frontend/dist/frontend

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}

stages:
  - build
  - test
  - release
  - notify
  - deploy  
  - info

# <--------------- Stage 1: Build --------------------->

build:
  stage: build  
  only:
    changes:
    - frontend/**/*
  script: 
    - cd frontend
    - npm install
    - npm run build
  artifacts:
    paths:
      - frontend/dist/frontend
    expire_in: 1 week

# <--------------- Stage 2: Test ---------------------->

# < --- sonarqube sast --- >

sonarqube-sast:
  stage: test
  image: sonarsource/sonar-scanner-cli:latest
  script:
    - cd frontend
    - >
      sonar-scanner 
      -Dsonar.qualitygate.wait=true
      -Dsonar.projectName=17_VASILY_KHARLAMOV_FRONTEND
      -Dsonar.projectKey=${CI_FRONTPROJ_KEY}
      -Dsonar.sources=.
      -Dsonar.host.url=${CI_SONAR_URL}
      -Dsonar.login=${CI_SONAR_TOKEN}
  needs:
    - build

# <--------------- Stage 3: Release --------------------->

release:
  stage: release
  only:
    changes:
    - frontend/**/*
  needs:
    - sonarqube-sast
  script:
    - cd frontend/dist
    - tar czvf sausage-store-${VERSION}.tar.gz frontend
    - curl -v -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}" --upload-file sausage-store-${VERSION}.tar.gz ${NEXUS_REPOFRONT_URL}/${VERSION}/sausage-store-${VERSION}.tar.gz

# <--------------- Stage 4: Notify ---------------------->

telegram-notification:
  stage: notify
  only:
    changes:
    - frontend/*
  script:
    - echo ${VERSION}
  #  - 'curl -X POST -H "Content-Type: application/json" -d "{\"chat_id\": \"-1001763459775\", \"text\": \"Вышла новая версия frontend сосисочной — ${VERSION}. Скачать frontend можно по ссылке: ${NEXUS_REPOFRONT_URL}/${VERSION}/sausage-store-${VERSION}.tar.gz\"}" https://api.telegram.org/$CI_TEL_TOKEN/sendMessage '
  needs:
    - release

# <--------------- Stage 5: Deploy --------------------->
  
deploy:
  stage: deploy
  environment:
    name: deploy-frontend-${VERSION}
    on_stop: info
  before_script:
  #устанавливаем ssh-agent для удобства аутентификации по ssh
  - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
  - eval $(ssh-agent -s)
  #сохраняем сгенерированный ранее приватный ключ для раннера
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 600 ~/.ssh
  - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts
  script:
  - scp ./frontend/sausage-store-frontend.service ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/sausage-store-frontend.service
  - ssh ${DEV_USER}@${DEV_HOST} "export "CURRENT_VERSION=${VERSION}"; export "VERSION=${VERSION}"; export "DEV_USER=${DEV_USER}"; export "DEV_HOST=${DEV_HOST}"; export "NEXUS_REPO_URL=${NEXUS_REPO_URL}"; export "NEXUS_REPO_USER=${NEXUS_REPO_USER}"; export "NEXUS_REPOFRONT_URL=${NEXUS_REPOFRONT_URL}"; export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}"; setsid /bin/bash -s " < ./frontend/deploy_fr.sh 
  needs:
    - release

# <--------------- Stage 6: Info --------------------->

info:
  stage: info
  script: 
  - echo 'Stage for rallback. WTF... Were is this fucking botton?'
  environment:
    name: deploy-frontend-${VERSION}
    action: stop