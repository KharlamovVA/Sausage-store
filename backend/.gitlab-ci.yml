
cache:
  paths: 
    - ${CI_PROJECT_DIR}/.m2/repository # для хранения зависимостей бэкенда

variables:
   VERSION: 1.0.${CI_PIPELINE_ID}
   MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
   JAVA_OPTS: -XX:MaxRAMPercentage=90 # для того, чтобы Maven не съел всю свободную оперативку

stages:
  - build
  - test
  - release
  - notify
  - deploy

# <--------------- Stage 1: Build -------- -------------->

build:
  stage: build  
  rules: # rules и only в данных случаях взаимозаменяемы
      - changes:
           - backend/**/*
  script:
    - cd backend
    - mvn package -Dversion.application=${VERSION} -Dmaven.repo.local=${MAVEN_REPO_PATH}
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/.m2/
      - backend/target/sausage-store-${VERSION}.jar

# <--------------- Stage 2: Test ---------------------->

# < --- sonarqube sast --- >

sonarqube-sast:
  stage: test
  image: maven:3.8-openjdk-16 
  script:
    - cd backend
    - >
      mvn verify sonar:sonar 
      -Dsonar.qualitygate.wait=true
      -Dsonar.projectName=17_VASILY_KHARLAMOV_BACKEND
      -Dsonar.projectKey=${CI_BACKPROJ_KEY}
      -Dsonar.host.url=${CI_SONAR_URL}
      -Dsonar.login=${CI_SONAR_TOKEN}
  needs:
    - build

# < --- gitlab sast --- >

spotbugs-sast:
  variables:
    COMPILE: "false"
    SAST_JAVA_VERSION: 16
    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository # при сборке указывать эту папку через аргумент -Dmaven.repo.local 
  needs:
    - sonarqube-sast
    - build
  script: 
    - echo "run spotbugs test"

# <--------------- Stage 3: Release --------------------->

release:
   stage: release
   script:
      - cd backend
      - mvn deploy -DskipTests -Dversion.application=${VERSION} -Dmaven.repo.local=${MAVEN_REPO_PATH} -s settings.xml
   rules:
      - changes:
           - backend/**/*
   needs:
    - sonarqube-sast

# <--------------- Stage 4: Notify ---------------------->

telegram-notification:
  stage: notify
  only:
    changes:
    - backend/*
  script:
    - echo ${VERSION}
  #  - 'curl -X POST -H "Content-Type: application/json" -d "{\"chat_id\": \"-1001763459775\", \"text\": \"Вышла новая версия backend сосисочной — ${VERSION}. Скачать backend можно по ссылке: ${NEXUS_REPOBACK_URL}/${VERSION}/sausage-store-${VERSION}.jar\"}" https://api.telegram.org/$CI_TEL_TOKEN/sendMessage '
  needs:
    - release

# <--------------- Stage 5: Deploy --------------------->

deploy:
  stage: deploy
  environment:
    name: deploy-backend-${VERSION}
    url: http://std-017-17.praktikum-services.tech:443/#
  before_script:
  #устанавливаем ssh-agent для удобства аутентификации по ssh
  - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
  - eval $(ssh-agent -s)
  #сохраняем сгенеренный ранее приватный ключ для раннера
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 600 ~/.ssh
  - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts
  script:
  - scp ./backend/sausage-store-backend.service ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/sausage-store-backend.service
  - ssh ${DEV_USER}@${DEV_HOST} "export "CURRENT_VERSION=${VERSION}"; export "VERSION=${VERSION}"; export "DEV_USER=${DEV_USER}"; export "DEV_HOST=${DEV_HOST}"; export "NEXUS_REPO_URL=${NEXUS_REPO_URL}"; export "NEXUS_REPO_USER=${NEXUS_REPO_USER}"; export "NEXUS_REPOBACK_URL=${NEXUS_REPOBACK_URL}"; export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}"; setsid /bin/bash -s " < ./backend/deploy_bc.sh 
  needs:
    - release