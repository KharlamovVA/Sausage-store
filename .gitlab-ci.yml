stages:
  - build
  - notify
  - test

# <--------------- Stage 1: build ---------------------->

build-backend-code-job:
  stage: build  
  only:
    changes:
    - backend/*
  script:
    - echo "BE_JOB_ID=$CI_JOB_ID" >> job_vars.env
    - echo BE_JOB_NAME=$CI_JOB_NAME >> job_vars.env
    - cd backend
    - mvn package
  artifacts:
    paths:
      - backend/target/sausage-store-0.0.1-SNAPSHOT.jar
    reports:
      dotenv:
        job_vars.env

build-frontend-code-job:
  stage: build  
  only:
    changes:
    - frontend/*
  script: 
    - echo "FE_JOB_ID=$CI_JOB_ID" >> job_vars.env
    - echo FE_JOB_NAME=$CI_JOB_NAME >> job_vars.env      
    - cd frontend
    - npm install
    - npm run build
  artifacts:
    paths:
      - frontend/dist/frontend
    reports:
      dotenv:
        job_vars.env


# <--------------- Stage 2: notify ---------------------->

telegram-notification-backend:
  stage: notify
  only:
    changes:
    - backend/*
  script:
    - echo $BE_JOB_NAME
  #  - 'curl -X POST -H "Content-Type: application/json" -d "{\"chat_id\": \"-1001763459775\", \"text\": \"Василий Харламов собрал $BE_JOB_NAME https://gitlab.praktikum-services.ru/std-017-017/sausage-store/-/jobs/$BE_JOB_ID/artifacts/download?file_type=archive\"}" https://api.telegram.org/$CI_TEL_TOKEN/sendMessage '
  needs:
    - build-backend-code-job

telegram-notification-frontend:
  stage: notify
  only:
    changes:
    - frontend/*
  script:
    - echo $FE_JOB_NAME
    #- 'curl -X POST -H "Content-Type: application/json" -d "{\"chat_id\": \"-1001763459775\", \"text\": \"Василий Харламов собрал $FE_JOB_NAME https://gitlab.praktikum-services.ru/std-017-017/sausage-store/-/jobs/$FE_JOB_ID/artifacts/download?file_type=archive\"}" https://api.telegram.org/$CI_TEL_TOKEN/sendMessage '
  needs:
    - build-frontend-code-job


# <--------------- Stage 3: test ---------------------->

# < --- sonarqube sast --- >
sonarqube-backend-sast:
  stage: test
  image: maven:3.8-openjdk-16 
  script:
    - cd backend
    - >
      mvn verify sonar:sonar 
      -Dsonar.qualitygate.wait=true
      -Dsonar.projectName=17_VASILY_KHARLAMOV_BACKEND
      -Dsonar.projectKey=${CI_BACKPROJ_KEY}
      -Dsonar.host.url=${CI_SONAR_URL}
      -Dsonar.login=${CI_SONAR_TOKEN}
  needs:
    - build-backend-code-job

sonarqube-frontend-sast:
  stage: test
  image: sonarsource/sonar-scanner-cli:latest
  script:
    - cd frontend
    - >
      sonar-scanner 
      -Dsonar.qualitygate.wait=true
      -Dsonar.projectName=17_VASILY_KHARLAMOV_FRONTEND
      -Dsonar.projectKey=${CI_FRONTPROJ_KEY}
      -Dsonar.sources=.
      -Dsonar.host.url=${CI_SONAR_URL}
      -Dsonar.login=${CI_SONAR_TOKEN}
  needs:
    - build-frontend-code-job

# < --- gitlab sast --- >

